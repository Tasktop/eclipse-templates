<?xml version="1.0" encoding="UTF-8" standalone="no"?><templates><template autoinsert="false" context="java" deleted="false" description="empty lambda with no parameter and no body" enabled="true" name="lambda">() -&gt; {${cursor}}</template><template autoinsert="false" context="java" deleted="false" description="consuming lambda expression" enabled="true" name="lambda consumer">${lambdaParameter:newName(parameter)} -&gt; {${cursor}}</template><template autoinsert="false" context="java" deleted="false" description="function lambda expression" enabled="true" name="lambda function">${lambdaParameter:newName(input)} -&gt; {return ${result};}</template><template autoinsert="false" context="java" deleted="false" description="predicate lambda expression" enabled="true" name="lambda predicate">${lambdaParameter:newName(parameter)} -&gt; {return ${matches:var(boolean)};}</template><template autoinsert="false" context="java" deleted="false" description="supplying lambda expression" enabled="true" name="lambda supplier">() -&gt; { return ${cursor}}</template><template autoinsert="false" context="java" deleted="false" description="Java 8 Optional of non-nullable" enabled="true" name="optional">${:import(java.util.Optional)}
Optional.of(${of});</template><template autoinsert="false" context="java" deleted="false" description="Java 8 Optional of nullable" enabled="true" name="optional nullable">${:import(java.util.Optional)}
Optional.ofNullable(${of});</template></templates>